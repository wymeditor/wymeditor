/* Copyright (c) 2007 Bermi Ferrer (http://bermi.org)
* Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
* and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
*
* Version: 1.0
*/

/*
* @name xml
* @description Use these methods to generate XML and XHTML compliant tags and 
* escape tag attributes correctly
* @author Bermi Ferrer - http://bermi.org
*/
jQuery.xml = {

  _entitiesDiv : document.createElement('div'),

  /*
  * @name tag
  * @description
  * Returns an empty HTML tag of type *name* which by default is XHTML
  * compliant. Setting *open* to true will create an open tag compatible
  * with HTML 4.0 and below. Add HTML attributes by passing an attributes
  * array to *options*. For attributes with no value like (disabled and
  * readonly), give it a value of true in the *options* array.
  *
  * Examples:
  *
  *   this.tag('br')
  *    # => <br />
  *   this.tag ('br', false, true)
  *    # => <br>
  *   this.tag ('input', $j({type:'text',disabled:true }) )
  *    # => <input type="text" disabled="disabled" />
  */
  tag : function(name, options, open)
  {
    options = options || false;
    open = open || false;
    return '<'+name+(options ? this.tagOptions(options) : '')+(open ? '>' : ' />');
  },

  /*
  * @name contentTag
  * @description
  * Returns a XML block tag of type *name* surrounding the *content*. Add
  * XML attributes by passing an attributes array to *options*. For attributes
  * with no value like (disabled and readonly), give it a value of true in
  * the *options* array. You can use symbols or strings for the attribute names.
  *
  *   this.contentTag ('p', 'Hello world!' )
  *    # => <p>Hello world!</p>
  *   this.contentTag('div', this.contentTag('p', "Hello world!"), $j({class : "strong"}))
  *    # => <div class="strong"><p>Hello world!</p></div>
  *   this.contentTag("select", options, $j({multiple : true}))
  *    # => <select multiple="multiple">...options...</select>
  */
  contentTag : function(name, content, options)
  {
    options = options || false;
    return '<'+name+(options ? this.tagOptions(options) : '')+'>'+content+'</'+name+'>';
  },

  /*
  * @name cdataSection
  * @description
  * Returns a CDATA section for the given +content+.  CDATA sections
  * are used to escape blocks of text containing characters which would
  * otherwise be recognized as markup. CDATA sections begin with the string
  * <tt>&lt;![CDATA[</tt> and } with (and may not contain) the string
  * <tt>]]></tt>.
  */
  cdataSection : function(content)
  {
    return '<![CDATA['+content+']]>';
  },


  /*
  * @name escapeOnce
  * @description
  * Returns the escaped +xml+ without affecting existing escaped entities.
  *
  *  this.escapeOnce( "1 > 2 &amp; 3")
  *    # => "1 &gt; 2 &amp; 3"
  */
  escapeOnce : function(xml)
  {
    return this._fixDoubleEscape(this.escapeEntities(xml));
  },

  /*
  * @name _fixDoubleEscape
  * @description
  * Fix double-escaped entities, such as &amp;amp;, &amp;#123;, etc.
  */
  _fixDoubleEscape : function(escaped)
  {
    return escaped.replace(/&amp;([a-z]+|(#\d+));/i, "&$1;");
  },

  /*
  * @name tagOptions
  * @description
  * Takes an array like the one generated by Tag.parseAttributes
  *  [["src", "http://www.editam.com/?a=b&c=d&amp;f=g"], ["title", "Editam, <Simplified> CMS"]]
  * or an object like {src:"http://www.editam.com/?a=b&c=d&amp;f=g", title:"Editam, <Simplified> CMS"}
  * and returns a string properly escaped like
  * ' src = "http://www.editam.com/?a=b&amp;c=d&amp;f=g" title = "Editam, &lt;Simplified&gt; CMS"'
  * which is valid for strict XHTML
  */
  tagOptions : function(options)
  {
    var xml = this;
    xml._formated_options = '';
    $j.each( options, function(key, value){
      var formated_options = '';
      if(value.length > 0) {
        if(typeof key == 'number' && typeof value == 'object'){
          key = value.shift();
          value = value.pop();
        }
        if(key != '' && value != ''){
          xml._formated_options += ' '+key+'="'+xml.escapeOnce(value)+'"';
        }
      }
    });
    return xml._formated_options;
  },

  /*
  * @name escapeEntities
  * @description
  * Escapes XML/HTML entities <, >, & and ". If seccond parameter is set to false it
  * will not escape ". If set to true it will also escape '
  */
  escapeEntities : function(string, escape_quotes)
  {
    this._entitiesDiv.textContent = string;
    var result = this._entitiesDiv.innerHTML;
    if(typeof escape_quotes == 'undefined'){
      if(escape_quotes != false) result = result.replace('"', '&quot;');
      if(escape_quotes == true)  result = result.replace('"', '&#039;');
    }
    return result;
  },

  /*
  * Parses a string conatining tag attributes and values an returns an array formated like
  *  [["src", "http://www.editam.com"], ["title", "Editam, Simplified CMS"]]
  */
  parseAttributes : function(tag_attributes)
  {
    // Use a compounded regex to match single quoted, double quoted and unquoted attribute pairs
    var matches = tag_attributes.split(/((=\s*")(")("))|((=\s*\')(\')(\'))|((=\s*[^>\s]*))/g);
    if(matches.toString() != tag_attributes){
      return $j.map(matches, function(v,k){
        if(v.length == 0) return;
        var re = new RegExp('(\\w+)\\s*'+v);
        if(match = tag_attributes.match(re) ){
          var value = v.replace(/^[\s=]+/, "");
          var delimiter = value.charAt(0);
          delimiter = delimiter == '"' ? '"' : (delimiter=="'"?"'":'');
          if(delimiter != ''){
            value = delimiter == '"' ? value.replace(/^"|"+$/g, '') :  value.replace(/^'|'+$/g, '');
          }
          tag_attributes = tag_attributes.replace(match[0],'');
          return [[match[1] , value]];
        }
        return null;
      });
    }
  }

};
