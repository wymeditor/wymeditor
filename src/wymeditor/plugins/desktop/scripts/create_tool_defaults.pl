#
# Helper script associated with Desktop plugin for WYMeditor
# Copyright (c) 2011  Calvin Schwenzfeier
# Dual licensed under the MIT (MIT-license.txt)
# and GPL (GPL-license.txt) licenses.
#
# File Authors:
#      Calvin Schwenzfeier (calvin DOT schwenzfeier A~T gmail dotCOM)
#

use strict;
use warnings;
use File::Path qw(make_path);

my $prefix = 'desktop.toolFunctions';  # The directory name the tools will reside in.
my $debug_var = 'this.selfObject.parent.DEBUG';

# Only load the needed sections of the Desktop JavaScript file.
open(my $FILE_FH, '<', '../jquery.wymeditor.desktop.js');
my @events = ();
my @names = ();
{
  my %in = ( events => 0, tools => 0, );
  my $section_done = 0;
  while(my $line = <$FILE_FH>) {
    # Find the beginning of the .availableEventNames() method.
    if($line =~ m/\A\s*WYMeditor\..*?\.desktop\.availableEventNames\s*[=].*?\s*\z/i) {
      $in{events} = 1;
    }
    # Find the beginning of the .availableTools() method.
    if($line =~ m/\A\s*WYMeditor\..*?\.desktop\.availableTools\s*[=].*?\s*\z/i) {
      $in{tools} = 1;
    }
    # Find the end of any section.
    if($line =~ m/\A\s*return\s+available\w+\s*;\s*\z/i) {
      if($in{events}) {
        $in{events} = 0;
        $section_done++;
      }
      elsif($in{tools}) {
        $in{tools} = 0;
        $section_done++;
      }
    }
    # Bail if we have read all sections.
    if($section_done >= scalar(keys(%in))) { last; }
    # Parse out the event data we need.
    if($in{events} && ($line =~ m/([\'\"])[A-Za-z]+\1/)) {
      my @list = grep { (defined $_) && (length($_) >= 1) } split(/\W+/, $line);
      push @events, @list;
    }
    # Parse out the tool name data we need.
    elsif($in{tools} && ($line =~ m/\A\s*([A-Za-z]+)[:]\s*/)) {
      push @names, $1;
    }
  }
}
close($FILE_FH);

if((not -e "../${prefix}/generated") || (not -d "../${prefix}/generated")) {
  make_path("../${prefix}/generated/");
}

# Write the auto-generated default JavaScript handlers.  There is not much to
# these handlers, they are only good for verifying a given event happened (and
# even then, only if Desktop debugging is on).
foreach my $name (@names) {
  my $filename = "../${prefix}/generated/desktop.${name}.js";
  open(my $FILE_FH, '>', $filename) || die "ERROR: Could not open '${filename}' for writing: $!\n";
  print $FILE_FH "/*\n" .
                 " * Desktop plugin for WYMeditor : what you see is What You Mean web-based editor\n" .
                 " * Copyright (c) 2011  Calvin Schwenzfeier\n" .
                 " * Dual licensed under the MIT (MIT-license.txt)\n" .
                 " * and GPL (GPL-license.txt) licenses.\n" .
                 " *\n" .
                 " * File Authors:\n" .
                 " *      Calvin Schwenzfeier (calvin DOT schwenzfeier A~T gmail dotCOM)\n" .
                 " */\n" .
                 "\n" .
                 "WYMeditor.editor.prototype.desktop.toolFunctions.${name} = new Object();\n" .
                 "\n" .
                 "/*\n" .
                 " *################################## WARNING ###################################\n" .
                 " *##                                                                          ##\n" .
                 " *##   File is generated by the .../scripts/create_tool_defaults.pl script!   ##\n" .
                 " *##                                                                          ##\n" .
                 " *##  To disable auto-generation of this file, place a multi-line comment in  ##\n" .
                 " *##  the space before the tool entry in the .availableTools() method in the  ##\n" .
                 " *##  jquery.wymeditor.desktop.js file.                                       ##\n" .
                 " *##                                                                          ##\n" .
                 " *##############################################################################\n" .
                 " */\n" .
                 "\n" .
                 "/**\n" .
                 " * Set the parent object for this ${name} object.\n" .
                 " * \n" .
                 " * \@param parentObj  A reference to the parent object of this ${name} object.\n" .
                 " */\n" .
                 "WYMeditor.editor.prototype.desktop.toolFunctions.${name}.setParent = function(parentObj) {\n" .
                 "    this.parent = parentObj;\n" .
                 "};\n" .
                 "\n";
  foreach my $event (@events) {
    my $a_an = ($event =~ m/^[aeiou]/i) ? "an" : "a";
    if($event eq 'toggle') {
      print $FILE_FH "/**\n" .
                     " * Default event handler for '${event}' events on the ${name} tool.\n" .
                     " */\n" .
                     "WYMeditor.editor.prototype.desktop.toolFunctions.${name}.${event} = [\n" .
                     "    function(eventObj) {\n" .
                     "        if( (${debug_var} != undefined) &&\n" .
                     "            (typeof(${debug_var}) == \"boolean\") &&\n" .
                     "            ${debug_var} ) {\n" .
                     "            console.log(\"The ${name} tool detected ${a_an} '${event}' event (click one).\");\n" .
                     "            console.log(eventObj);\n" .
                     "        }\n" .
                     "    },\n" .
                     "    function(eventObj) {\n" .
                     "        if( (${debug_var} != undefined) &&\n" .
                     "            (typeof(${debug_var}) == \"boolean\") &&\n" .
                     "            ${debug_var} ) {\n" .
                     "            console.log(\"The ${name} tool detected ${a_an} '${event}' event (click two).\");\n" .
                     "            console.log(eventObj);\n" .
                     "        }\n" .
                     "    }\n" .
                     "];\n" .
                     "\n";
    }
    else {
      print $FILE_FH "/**\n" .
                     " * Default event handler for '${event}' events on the ${name} tool.\n" .
                     " */\n" .
                     "WYMeditor.editor.prototype.desktop.toolFunctions.${name}.${event} = function(eventObj) {\n" .
                     "    if( (${debug_var} != undefined) &&\n" .
                     "        (typeof(${debug_var}) == \"boolean\") &&\n" .
                     "        ${debug_var} ) {\n" .
                     "        console.log(\"The ${name} tool detected ${a_an} '${event}' event.\");\n" .
                     "        console.log(eventObj);\n" .
                     "    }\n" .
                     "};\n" .
                     "\n";
    }
  }
  close($FILE_FH);
}

__END__

